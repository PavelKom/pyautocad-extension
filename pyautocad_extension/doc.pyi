from .api import acad_dll

from .app import AcadApplication
from .utils import _ez_ptr
from .enums import (
    AcActiveSpace,
    AcSaveAsType,
)

from .stubs import (
    AcadBlocks,
    AcadDatabase,
    AcadDatabasePreferences,
    AcadDictionaries,
    AcadDimStyle,
    AcadDimStyles,
    AcadGroups,
    AcadLayer,
    AcadLayers,
    AcadLayout,
    AcadLayouts,
    AcadLineType,
    AcadLineTypes,
    AcadMaterial,
    AcadMaterials,
    AcadModelSpace,
    AcadPaperSpace,
    AcadPlot,
    AcadPlotConfigurations,
    AcadPViewport,
    AcadRegisteredApplications,
    AcadSectionManager,
    AcadSelectionSet,
    AcadSummaryInfo,
    AcadTextStyle,
    AcadTextStyles,
    AcadUCS,
    AcadUCSs,
    AcadUtility,
    AcadViewport,
    AcadViewports,
    AcadViews,
)

_dll = acad_dll.dll

class AcadDatabase(POINTER(_dll.IAcadDatabase), _ez_ptr):
    def copyobjects(self, Objects: (list, tuple), Owner: Any=None, IDPairs: Any=None) -> None: ...
    def handletoobject(self, Handle: str) -> Any: ...
    def objectidtoobject(self, ObjectID: int) -> Any: ...
    @property
    def blocks(self) -> AcadBlocks: ...
    @property
    def dictionaries(self) -> AcadDictionaries: ...
    @property
    def dimstyles(self) -> AcadDimStyles: ...
    @property
    def elevationmodelspace(self) -> float: ...
    @property
    def elevationpaperspace(self) -> float: ...
    @property
    def groups(self) -> AcadGroups: ...
    @property
    def layers(self) -> AcadLayers: ...
    @property
    def layouts(self) -> AcadLayouts: ...
    @property
    def limits(self) -> tuple: ...
    @property
    def linetypes(self) -> AcadLineTypes: ...
    @property
    def materials(self) -> AcadMaterials: ...
    @property
    def modelspace(self) -> AcadModelSpace: ...
    @property
    def paperspace(self) -> AcadPaperSpace: ...
    @property
    def plotconfigurations(self) -> AcadPlotConfigurations: ...
    @property
    def preferences(self) -> AcadDatabasePreferences: ...
    @property
    def registeredapplications(self) -> AcadRegisteredApplications: ...
    @property
    def sectionmanager(self) -> AcadSectionManager: ...
    @property
    def summaryinfo(self) -> AcadSummaryInfo: ...
    @property
    def textstyles(self) -> AcadTextStyles: ...
    @property
    def usercoordinatesystems(self) -> AcadUCSs: ...
    @property
    def viewports(self) -> AcadViewports: ...
    @property
    def views(self) -> AcadViews: ...

class AcadDocument(POINTER(_dll.IAcadDocument), _ez_ptr):
    def __new__(cls, TemplateFileName: str, app: AcadApplication=None) -> AcadDocument: ...
    def activate(self) -> None: ...
    def auditinfo(self, FixErr: bool) -> None: ...
    def close(self, SaveChanges: bool=None, FileName: str=None) -> None: ...
    def copyobjects(self, Objects: (list, tuple), Owner: Any=None, IDPairs: Any=None) -> None: ...
    def endundomark(self) -> None: ...
    def export(self, FileName: str, Extension: str, SelectionSet: AcadSelectionSet) -> None: ...
    def getvariable(Name: str) -> Any: ...
    def handletoobject(self, Handle: str) -> Any: ...
    def import_(self, FileName: str, InsertionPoint: Any, ScaleFactor: float) -> None: ...
    def loadshapefile(self, FullName: str) -> None: ...
    def new(self, TemplateFileName: str) -> AcadDocument: ...
    def objectidtoobject(self, ObjectID: Any) -> Any: ...
    def open(self, FullName: str, ReadOnly: bool, Password: Any=None) -> AcadDocument: ...
    def postcommand(self, Command: str) -> None: ...
    def purgeall(self) -> None: ...
    def regen(self, WhichViewports: int) -> None: ...
    def save(self) -> None: ...
    def saveas(self, FullFileName: str, SaveAsType: AcSaveAsType=None, vSecurityParams: Any=None) -> None: ...
    def sendcommand(self, Command: str) -> None: ...
    def setvariable(self, Name: str, Value: Any) -> None: ...
    def startundomark(self) -> None: ...
    def wblock(self, FileName: str, SelectionSet: AcadSelectionSet) -> None: ...
    @property
    def active(self) -> bool: ...
    @property
    def activedimstyle(self) -> AcadDimStyle: ...
    @property
    def activelayer(self) -> AcadLayer: ...
    @property
    def activelayout(self) -> AcadLayout: ...
    @property
    def activelinetype(self) -> AcadLineType: ...
    @property
    def activematerial(self) -> AcadMaterial: ...
    @property
    def activepviewport(self) -> AcadPViewport: ...
    @property
    def activeselectionset(self) -> AcadSelectionSet: ...
    @property
    def activespace(self) -> AcActiveSpace: ...
    @property
    def activetextstyle(self) -> AcadTextStyle: ...
    @property
    def activeucs(self) -> AcadUCS: ...
    @property
    def activeviewport(self) -> AcadViewport: ...
    @property
    def application(self) -> AcadApplication: ...
    @property
    def blocks(self) -> AcadBlocks: ...
    @property
    def database(self) -> AcadDatabase: ...
    @property
    def dictionaries(self) -> AcadDictionaries: ...
    @property
    def dimstyles(self) -> AcadDimStyles: ...
    @property
    def elevationmodelspace(self) -> float: ...
    @property
    def elevationpaperspace(self) -> float: ...
    @property
    def fullname(self) -> str: ...
    @property
    def groups(self) -> AcadGroups: ...
    @property
    def hwnd(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def layers(self) -> AcadLayers: ...
    @property
    def layouts(self) -> AcadLayouts: ...
    @property
    def limits(self) -> tuple: ...
    @property
    def linetypes(self) -> AcadLineTypes: ...
    @property
    def materials(self) -> AcadMaterials: ...
    @property
    def modelspace(self) -> AcadModelSpace: ...
    @property
    def mspace(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def objectsnapmode(self) -> bool: ...
    @property
    def paperspace(self) -> AcadPaperSpace: ...
    @property
    def path(self) -> str: ...
    @property
    def pickfirstselectionset(self) -> AcadSelectionSet: ...
    @property
    def plot(self) -> AcadPlot: ...
    @property
    def plotconfigurations(self) -> AcadPlotConfigurations: ...
    @property
    def preferences(self) -> AcadDatabasePreferences: ...
    @property
    def readonly(self) -> bool: ...
    @property
    def registeredapplications(self) -> AcadRegisteredApplications: ...
    @property
    def saved(self) -> bool: ...
    @property
    def sectionmanager(self) -> AcadSectionManager: ...
    @property
    def selectionsets(self) -> AcadSelectionSet: ...
    @property
    def summaryinfo(self) -> AcadSummaryInfo: ...
    @property
    def textstyles(self) -> AcadTextStyles: ...
    @property
    def usercoordinatesystems(self) -> AcadUCSs: ...
    @property
    def utility(self) -> AcadUtility: ...
    @property
    def viewports(self) -> AcadViewports: ...
    @property
    def views(self) -> AcadViews: ...

class AcadDocuments(POINTER(_dll.IAcadDocuments), _ez_ptr):
    def add(self, TemplateName: str=None) -> AcadDocument: ...
    def close(self) -> None: ...
    def item(self, Index: int) -> AcadDocument: ...
    def open(self, Name: str, ReadOnly: Any=None, Password: Any=None) -> AcadDocument: ...
